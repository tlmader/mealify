{"version":3,"sources":["contexts/MealContext.tsx","contexts/FoodItemContext.tsx","helpers/calculateCalories.tsx","components/MealItem.tsx","components/MealList.tsx","helpers/adjustFoodPortionValue.tsx","components/FoodPortionInput.tsx","components/AddFoodItemList.tsx","components/CreateMealForm.tsx","components/CreateMealView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MealContext","React","createContext","addMeal","addedMeal","meals","foodPortions","id","portions","MealProvider","_ref","children","_useState","useState","_useState2","Object","slicedToArray","state","setState","useCallback","_ref2","concat","toConsumableArray","react_default","a","createElement","Provider","value","objectSpread","foodItems","name","calories","portion","foodItemMap","Map","map","foodItem","getFoodItem","get","FoodItemContext","FoodItemProvider","calculateTotalCalories","reduce","total","foodPortion","calculateCalories","Math","floor","MealItem","index","meal","useContext","totalCalories","className","key","renderFoodItem","renderMealItem","MealItem_MealItem","MealList","adjustFoodPortionValue","min","abs","FoodPortionInput","submitted","onChange","onRemove","touched","handleBlur","handleChange","event","target","handleRemove","type","onClick","onBlur","placeholder","max","step","Number","renderError","AddFoodItemList","onAdd","initialState","updateFoodPortion","slice","foodPortionIsValid","Boolean","CreateMealForm","onValidSubmit","_useState2$","handleReset","handleAddFoodItem","foundIndex","findIndex","foundFoodPortion","addFoodPortion","removeFoodItem","handleSubmit","length","every","prevState","preventDefault","inputValue","AddFoodItemList_AddFoodItemList","onSubmit","FoodPortionInput_FoodPortionInput","disabled","showForm","CreateMealView","handleClick","handleValidSubmit","CreateMealForm_CreateMealForm","App","FoodItemContext_FoodItemProvider","MealContext_MealProvider","MealList_MealList","CreateMealView_CreateMealView","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAkCaA,EAAcC,IAAMC,cAAc,CAC7CC,QAAS,SAACC,KACVC,MA7BwC,CACxC,CACEC,aAAc,CACZ,CACEC,GAAI,IACJC,SAAU,GAEZ,CACED,GAAI,IACJC,SAAU,KAIhB,CACEF,aAAc,CACZ,CACEC,GAAI,IACJC,SAAU,GAEZ,CACED,GAAI,IACJC,SAAU,QAULC,EAAyB,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EAC5BC,mBAAgB,CAAER,MAhCJ,CACxC,CACEC,aAAc,CACZ,CACEC,GAAI,IACJC,SAAU,GAEZ,CACED,GAAI,IACJC,SAAU,KAIhB,CACEF,aAAc,CACZ,CACEC,GAAI,IACJC,SAAU,GAEZ,CACED,GAAI,IACJC,SAAU,QAUsCM,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC/CK,EAD+CH,EAAA,GACxCI,EADwCJ,EAAA,GAGhDX,EAAUgB,sBACd,SAACf,GACCc,EAAS,SAAAE,GAAA,IAAGf,EAAHe,EAAGf,MAAH,MAAgB,CAAEA,MAAK,GAAAgB,OAAAN,OAAAO,EAAA,EAAAP,CAAMV,GAAN,CAAaD,QAE/C,CAACc,IAGH,OACEK,EAAAC,EAAAC,cAACzB,EAAY0B,SAAb,CACEC,MAAKZ,OAAAa,EAAA,EAAAb,CAAA,GACAE,EADA,CAEHd,aAGDQ,ICpDMkB,EAAwB,CACnC,CACEtB,GAAI,IACJuB,KAAM,YACNC,SAAU,IACVC,QAAS,IAEX,CACEzB,GAAI,IACJuB,KAAM,WACNC,SAAU,IACVC,QAAS,IAEX,CACEzB,GAAI,IACJuB,KAAM,QACNC,SAAU,IACVC,QAAS,IAEX,CACEzB,GAAI,IACJuB,KAAM,YACNC,SAAU,EACVC,QAAS,IAMPC,EAFsE,IAAIC,IAE1CL,EAFwDM,IAAI,SAAAC,GAAQ,MAAK,CAACA,EAAS7B,GAAI6B,MAIvHC,EAAc,SAAC9B,GAAD,OAAgB0B,EAAYK,IAAI/B,IAEvCgC,EAAkBtC,IAAMC,cAAc,CACjD2B,YACAQ,gBAGWG,EAA6B,SAAA9B,GAAkB,IAAfC,EAAeD,EAAfC,SAC3C,OACEY,EAAAC,EAAAC,cAACc,EAAgBb,SAAjB,CACEC,MAAO,CACLE,YACAQ,gBAGD1B,IC9CM8B,SAAyB,SAACnC,EAA6B+B,GAA9B,OACpC/B,EAAaoC,OACX,SAACC,EAAOC,GACN,IAAMR,EAAWC,EAAYO,EAAYrC,IACzC,OAAO6B,EACHO,EAAQE,EAAkBT,EAAUQ,EAAYpC,UAChDmC,GAEN,KAGSE,EAAoB,SAAAnC,EAAkCF,GAAlC,IAAGuB,EAAHrB,EAAGqB,SAAUC,EAAbtB,EAAasB,QAAb,OAC/Bc,KAAKC,MAAOf,EAAUxB,EAAW,IAAOuB,ICS7BiB,EAA4B,SAAAtC,GAAqB,IAAlBuC,EAAkBvC,EAAlBuC,MAAOC,EAAWxC,EAAXwC,KACzCb,EAAgBc,qBAAWZ,GAA3BF,YACFe,EAAgBX,EAAuBS,EAAK5C,aAAc+B,GAChE,OACEd,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,YACb9B,EAAAC,EAAAC,cAAA,kBAAUwB,EAAQ,EAAlB,KAAuBG,EAAvB,aACCF,EAAK5C,aAAa6B,IAlBK,SAACE,GAAD,OAC5B,SAACO,EAA0BK,GACzB,IAAMb,EAAWC,EAAYO,EAAYrC,IACzC,OAAO6B,GACLb,EAAAC,EAAAC,cAAA,MAAI4B,UAAU,sBAAsBC,IAAKL,GACvC1B,EAAAC,EAAAC,cAAA,UAAKW,EAASN,MACdP,EAAAC,EAAAC,cAAA,UAAKmB,EAAYpC,SAAjB,aACAe,EAAAC,EAAAC,cAAA,UAAKoB,EAAkBT,EAAUQ,EAAYpC,UAA7C,qBAWqB+C,CAAelB,MCzBtCmB,EAAiB,SAACN,EAAYD,GAAb,OAA+B1B,EAAAC,EAAAC,cAACgC,EAAD,CAAUP,KAAMA,EAAMD,MAAOA,EAAOK,IAAKL,KAElFS,EAAqB,WAAM,IAC9BrD,EAAU8C,qBAAWnD,GAArBK,MACR,OACEkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACCpB,EAAM8B,IAAIqB,KCTJG,SAAyB,SAAChC,GAAD,OACpCA,EAAQmB,KAAKc,IAAId,KAAKe,KAAKlC,GAAQ,KAAQ,KC0BhCmC,EAAoD,SAAA1C,GAA+D,IAA5D6B,EAA4D7B,EAA5D6B,MAAOb,EAAqDhB,EAArDgB,SAAU2B,EAA2C3C,EAA3C2C,UAAWpC,EAAgCP,EAAhCO,MAAOqC,EAAyB5C,EAAzB4C,SAAUC,EAAe7C,EAAf6C,SAAerD,EAC9FC,mBAVN,CAC1BqD,SAAS,IAQqHpD,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrHsD,EADqHpD,EAAA,GACrHoD,QAAWhD,EAD0GJ,EAAA,GAGxHqD,EAAahD,sBACjB,WACED,EAAS,CAAEgD,SAAS,KAEtB,CAAChD,IAGGkD,EAAejD,sBACnB,SAACkD,GAA+C,IACvC1C,EAAS0C,EAAMC,OAAf3C,MACPqC,EAASf,EAAO,CAAE1C,GAAI6B,EAAS7B,GAAIC,SAAUmD,EAAuBhC,MAEtE,CAACsB,EAAOb,EAAU4B,IAGdO,EAAepD,sBACnB,WACED,EA7BsB,CAC1BgD,SAAS,IA6BLD,EAAShB,IAEX,CAACA,EAAO/B,EAAU+C,IAGpB,OACE1C,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,oBACb9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,6BACb9B,EAAAC,EAAAC,cAAA,UAAKW,EAASN,MACdP,EAAAC,EAAAC,cAAA,UAAQ+C,KAAK,SAASC,QAASF,GAA/B,WAEFhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,2BACb9B,EAAAC,EAAAC,cAAA,SACEE,MAAOA,EAAMnB,SACbkE,OAAQP,EACRH,SAAUI,EACVO,YAAY,iBACZH,KAAK,SACLI,IAAI,OACJhB,IAAI,IACJiB,KAAK,QAENhC,EAAkBT,EAAU0C,OAAOnD,EAAMnB,WAX5C,YAvCU,SAACuD,EAAoBG,EAArBxD,GAAA,IAAyCF,EAAzCE,EAAyCF,SAAzC,OAChBuD,GAAaG,KAAiC,kBAAb1D,GAAyBA,GAAY,IACrEe,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,2BAAf,8CAiDQ0B,CAAYhB,EAAWG,EAASvC,QCpEhCqD,SAAmC,SAAAtE,GAAe,IAAZuE,EAAYvE,EAAZuE,MACzCpD,EAAcsB,qBAAWZ,GAAzBV,UACR,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACCI,EAAUM,IAAI,SAAAC,GAAQ,OACrBb,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,6BAA6BC,IAAKlB,EAAS7B,IACxDgB,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,4BACb9B,EAAAC,EAAAC,cAAA,UAAKW,EAASN,MACdP,EAAAC,EAAAC,cAAA,UAAQ+C,KAAK,SAASC,QAAS,kBAAMQ,EAAM7C,KAA3C,gBAEFb,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKW,EAASL,SAAd,2BACAR,EAAAC,EAAAC,cAAA,UAAKW,EAASJ,QAAd,6BCDNkD,SAAgC,CACpC5E,aAAc,GACdyD,WAAW,IAiBPoB,EAAoB,SAAClC,EAAetB,GAAhB,OAA0D,SAACV,GAAD,OAAAF,OAAAa,EAAA,EAAAb,CAAA,GAC/EE,EAD+E,CAElFX,aAAY,GAAAe,OAAAN,OAAAO,EAAA,EAAAP,CACPE,EAAMX,aAAa8E,MAAM,EAAGnC,IADrB,CAAAlC,OAAAa,EAAA,EAAAb,CAAA,GAELE,EAAMX,aAAa2C,GAAWtB,EAFzB,CAEgCnB,SAAUmD,EAAuBhC,EAAMnB,aAFvEO,OAAAO,EAAA,EAAAP,CAGPE,EAAMX,aAAa8E,MAAMnC,EAAQ,SASlCoC,EAAqB,SAACzC,GAAD,OACzB0C,QAAQ1C,EAAYrC,IAAMqC,EAAYpC,SAAW,IAQtC+E,EAAkC,SAAA7E,GAAuB,IAApB8E,EAAoB9E,EAApB8E,cAAoB5E,EACpBC,mBAASqE,GADWpE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAA6E,EAAA3E,EAAA,GAC3DR,EAD2DmF,EAC3DnF,aAAcyD,EAD6C0B,EAC7C1B,UAAa7C,EADgCJ,EAAA,GAE5DuB,EAAgBc,qBAAWZ,GAA3BF,YAEF+B,EAA2BjD,sBAC/B,SAAC8B,EAAOtB,GACNT,EAASiE,EAAkBlC,EAAOtB,KAEpC,CAACT,IAGGwE,EAAcvE,sBAClB,WACED,EAASgE,IAEX,CAAChE,IAGGyE,EAAoBxE,sBACxB,SAACiB,GACClB,EAzDiB,SAACkB,GAAD,OAAwB,SAACnB,GAAwB,IAC9DX,EAAiBW,EAAjBX,aACFsF,EAAatF,EAAauF,UAAU,SAAAjD,GAAW,OAAIA,EAAYrC,KAAO6B,EAAS7B,KAC/EuF,EAAmBxF,EAAasF,GAEtC,OAAuB,IAAhBA,EAAA7E,OAAAa,EAAA,EAAAb,CAAA,GAEAE,EAFA,CAGHX,aAAcA,EAAae,OAAO,CAAEd,GAAI6B,EAAS7B,GAAIC,SAAU,MAE/D2E,EAAkBS,EAAD7E,OAAAa,EAAA,EAAAb,CAAA,GAAkB+E,EAAlB,CAAoCtF,SAAUsE,OAAOgB,EAAiBtF,UAAY,IAAnG2E,CAAwGlE,IA+C/F8E,CAAe3D,KAE1B,CAAClB,IAGGqD,EAA2BpD,sBAC/B,SAAC8B,GACC/B,EAzCiB,SAAC+B,GAAD,OAAmB,SAAChC,GAAD,OAAAF,OAAAa,EAAA,EAAAb,CAAA,GACrCE,EADqC,CAExCX,aAAY,GAAAe,OAAAN,OAAAO,EAAA,EAAAP,CAAME,EAAMX,aAAa8E,MAAM,EAAGnC,IAAlClC,OAAAO,EAAA,EAAAP,CAA6CE,EAAMX,aAAa8E,MAAMnC,EAAQ,QAuC7E+C,CAAe/C,KAE1B,CAAC/B,IAGG+E,EAAe9E,sBACnB,SAACkD,GACK/D,EAAa4F,QAAU5F,EAAa6F,MAAMd,IAC5CG,EAAc,CAAElF,aAAcA,IAC9BY,EAASgE,IAEThE,EAAS,SAAAkF,GAAS,OAAArF,OAAAa,EAAA,EAAAb,CAAA,GAAUqF,EAAV,CAAqBrC,WAAW,MAEpDM,EAAMgC,kBAER,CAAC/F,EAAckF,EAAetE,IAG1BkC,EAAgBX,EAAiDnC,EAlD3D6B,IAAI,SAAAmE,GAAU,OAAAvF,OAAAa,EAAA,EAAAb,CAAA,GACrBuF,EADqB,CAExB9F,SAAUsE,OAAOwB,EAAW9F,cAgDwD6B,GAEtF,OACEd,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,kBACb9B,EAAAC,EAAAC,cAAC8E,EAAD,CAAiBtB,MAAOU,IACxBpE,EAAAC,EAAAC,cAAA,QAAM4B,UAAU,uBAAuBmD,SAAUP,GAC9C3F,EAAa6B,IAAI,SAACS,EAAaK,GAC9B,IAAMb,EAAWC,EAAYO,EAAYrC,IACzC,OAAO6B,GACLb,EAAAC,EAAAC,cAACgF,EAAD,CACExD,MAAOA,EACPc,UAAWA,EACXpC,MAAOiB,EACPR,SAAUA,EACV4B,SAAUI,EACVH,SAAUM,EACVjB,IAAKL,MAIX1B,EAAAC,EAAAC,cAAA,6BAAqB2B,IACnB9C,EAAa4F,QAAU3E,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,iCAAf,+BACzB9B,EAAAC,EAAAC,cAAA,UAAQiF,UAAWpG,EAAa4F,OAAQ1B,KAAK,SAASC,QAASiB,GAA/D,SACAnE,EAAAC,EAAAC,cAAA,UAAQiF,UAAWpG,EAAa4F,QAAhC,kBC9HFhB,EAAe,CACnByB,UAAU,GAICC,EAA2B,WAAM,IACpCzG,EAAYgD,qBAAWnD,GAAvBG,QADoCS,EAEXC,mBAAgBqE,GAFLpE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEnC+F,EAFmC7F,EAAA,GAEnC6F,SAAYzF,EAFuBJ,EAAA,GAItC+F,EAAc1F,sBAClB,WACED,EAAS,CAAEyF,UAAU,KAEvB,CAACzF,IAGG4F,EAAoB3F,sBACxB,SAAC+B,GACC/C,EAAQ+C,GACRhC,EAASgE,IAEX,CAAC/E,EAASe,IAGZ,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACCkF,EAAWpF,EAAAC,EAAAC,cAACsF,EAAD,CAAgBvB,cAAesB,IAAwBvF,EAAAC,EAAAC,cAAA,UAAQgD,QAASoC,GAAjB,qBCL1DG,EApBO,WACpB,OACEzF,EAAAC,EAAAC,cAACwF,EAAD,KACE1F,EAAAC,EAAAC,cAACyF,EAAD,KACE3F,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACb9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uCAEFF,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,iBACf9B,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,gBACb9B,EAAAC,EAAAC,cAAC0F,EAAD,MACA5F,EAAAC,EAAAC,cAAC2F,EAAD,WCPQ9B,QACW,cAA7B+B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb1574a4.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Meal } from '../interfaces/Meal';\n\ninterface State {\n  meals: Meal[];\n}\n\nexport const defaultMeals = (): Meal[] => [\n  {\n    foodPortions: [\n      {\n        id: '1',\n        portions: 2\n      },\n      {\n        id: '2',\n        portions: 1\n      },\n    ]\n  },\n  {\n    foodPortions: [\n      {\n        id: '3',\n        portions: 4\n      },\n      {\n        id: '4',\n        portions: 1\n      }\n    ]\n  },\n];\n\nexport const MealContext = React.createContext({\n  addMeal: (addedMeal: Meal) => {},\n  meals: defaultMeals()\n});\nexport const MealProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState<State>({ meals: defaultMeals() })\n\n  const addMeal = useCallback(\n    (addedMeal: Meal) => {\n      setState(({ meals }) => ({ meals: [...meals, addedMeal] }));\n    },\n    [setState],\n  );\n\n  return (\n    <MealContext.Provider\n      value={{\n        ...state,\n        addMeal\n      }}\n    >\n      {children}\n    </MealContext.Provider>\n  );\n};\n","import React from 'react';\nimport { FoodItem } from '../interfaces/FoodItem';\n\nexport const foodItems: FoodItem[] = [\n  {\n    id: '1',\n    name: 'Spaghetti',\n    calories: 500,\n    portion: 20\n  },\n  {\n    id: '2',\n    name: 'Lemonade',\n    calories: 200,\n    portion: 10\n  },\n  {\n    id: '3',\n    name: 'Sushi',\n    calories: 250,\n    portion: 10\n  },\n  {\n    id: '4',\n    name: 'Green Tea',\n    calories: 5,\n    portion: 5\n  }\n];\n\nconst createFoodItemMap = (foodItems: FoodItem[]): Map<string, FoodItem> => new Map(foodItems.map(foodItem => ([foodItem.id, foodItem])));\n\nconst foodItemMap = createFoodItemMap(foodItems);\n\nconst getFoodItem = (id: string) => foodItemMap.get(id);\n\nexport const FoodItemContext = React.createContext({\n  foodItems,\n  getFoodItem,\n});\n\nexport const FoodItemProvider: React.FC = ({ children }) => {\n  return (\n    <FoodItemContext.Provider\n      value={{\n        foodItems,\n        getFoodItem,\n      }}\n    >\n      {children}\n    </FoodItemContext.Provider>\n  );\n};\n","import { FoodItem } from '../interfaces/FoodItem';\nimport { FoodPortion } from '../interfaces/Meal';\n\nexport const calculateTotalCalories = (foodPortions: FoodPortion[], getFoodItem: (id: string) => FoodItem | undefined) =>\n  foodPortions.reduce(\n    (total, foodPortion) => {\n      const foodItem = getFoodItem(foodPortion.id);\n      return foodItem\n        ? total + calculateCalories(foodItem, foodPortion.portions)\n        : total;\n    },\n    0\n  );\n\nexport const calculateCalories = ({ calories, portion }: FoodItem, portions: number) =>\n  Math.floor((portion * portions / 100) * calories);","import React, { useContext } from 'react';\nimport { FoodItemContext } from '../contexts/FoodItemContext';\nimport { FoodItem } from '../interfaces/FoodItem';\nimport { FoodPortion, Meal } from '../interfaces/Meal';\nimport './MealItem.css';\nimport { calculateTotalCalories, calculateCalories } from '../helpers/calculateCalories';\n\ninterface Props {\n  index: number;\n  meal: Meal;\n}\n\nexport const renderFoodItem = (getFoodItem: (id: string) => FoodItem | undefined) =>\n  (foodPortion: FoodPortion, index: number) => {\n    const foodItem = getFoodItem(foodPortion.id);\n    return foodItem && (\n      <ul className=\"MealItem__food-item\" key={index}>\n        <li>{foodItem.name}</li>\n        <li>{foodPortion.portions} portions</li>\n        <li>{calculateCalories(foodItem, foodPortion.portions)} total calories</li>\n      </ul>\n    );\n  }\n\nexport const MealItem: React.FC<Props> = ({ index, meal }) => {\n  const { getFoodItem } = useContext(FoodItemContext);\n  const totalCalories = calculateTotalCalories(meal.foodPortions, getFoodItem);\n  return (\n    <div className=\"MealItem\">\n      <h4>Meal {index + 1}: {totalCalories} calories</h4>\n      {meal.foodPortions.map(renderFoodItem(getFoodItem))}\n    </div>\n  );\n}","import React, { useContext } from 'react';\nimport { Meal } from '../interfaces/Meal';\nimport { MealContext } from '../contexts/MealContext';\nimport { MealItem } from './MealItem';\n\nconst renderMealItem = (meal: Meal, index: number) => <MealItem meal={meal} index={index} key={index} />\n\nexport const MealList: React.FC = () => {\n  const { meals } = useContext(MealContext);\n  return (\n    <div>\n      <h2>My Meals</h2>\n      {meals.map(renderMealItem)}\n    </div>\n  );\n};\n","/**\n * Prevents negative, invalid, or values over 1000 from being used as a food portion.\n */\nexport const adjustFoodPortionValue = (value: number | string | undefined): number | string =>\n  value ? Math.min(Math.abs(+value), 1000) : ''","import React, { useState, useCallback } from 'react';\nimport { calculateCalories } from '../helpers/calculateCalories';\nimport { FoodItem } from '../interfaces/FoodItem';\nimport './FoodPortionInput.css';\nimport { adjustFoodPortionValue } from '../helpers/adjustFoodPortionValue';\n\n// Use separate interface for input values to handle empty strings produced by invalid input\nexport interface FoodPortionInputValue {\n  portions: number | string;\n  id: string;\n}\n\nexport interface FoodPortionInputProps {\n  index: number;\n  submitted: boolean;\n  foodItem: FoodItem;\n  value: FoodPortionInputValue;\n  onChange: (index: number, value: Partial<FoodPortionInputValue>) => void;\n  onRemove: (index: number) => void;\n}\n\nconst initialState = () => ({\n  touched: false\n})\ntype State = Readonly<ReturnType<typeof initialState>>;\n\nconst renderError = (submitted: boolean, touched: boolean, { portions }: FoodPortionInputValue) =>\n  ((submitted || touched) && (typeof portions !== 'number' || portions <= 0))\n  && <div className=\"FoodPortionInput__error\">Please enter a valid number greater than 0</div>\n\nexport const FoodPortionInput: React.FC<FoodPortionInputProps> = ({ index, foodItem, submitted, value, onChange, onRemove }) => {\n  const [{ touched }, setState] = useState<State>(initialState());\n\n  const handleBlur = useCallback(\n    () => {\n      setState({ touched: true });\n    },\n    [setState],\n  );\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = event.target;\n      onChange(index, { id: foodItem.id, portions: adjustFoodPortionValue(value) });\n    },\n    [index, foodItem, onChange],\n  );\n\n  const handleRemove = useCallback(\n    () => {\n      setState(initialState());\n      onRemove(index);\n    },\n    [index, setState, onRemove],\n  );\n\n  return (\n    <div className=\"FoodPortionInput\">\n      <div className=\"FoodPortionInput__heading\">\n        <h4>{foodItem.name}</h4>\n        <button type=\"button\" onClick={handleRemove}>Remove</button>\n      </div>\n      <div>\n        <label>\n          Portions\n          <div className=\"FoodPortionInput__input\">\n            <input\n              value={value.portions}\n              onBlur={handleBlur}\n              onChange={handleChange}\n              placeholder=\"Enter a number\"\n              type=\"number\"\n              max=\"1000\"\n              min=\"0\"\n              step=\"0.1\"\n            />\n            {calculateCalories(foodItem, Number(value.portions))} calories\n            {renderError(submitted, touched, value)}\n          </div>\n        </label>\n      </div>\n    </div>\n  );\n}","import React, { useContext } from 'react';\nimport { FoodItemContext } from '../contexts/FoodItemContext';\nimport { FoodItem } from '../interfaces/FoodItem';\nimport './AddFoodItemList.css'\n\ninterface Props {\n  onAdd: (foodItem: FoodItem) => void;\n}\n\nexport const AddFoodItemList: React.FC<Props> = ({ onAdd }) => {\n  const { foodItems } = useContext(FoodItemContext);\n  return (\n    <div>\n      <h3>Food Items</h3>\n      {foodItems.map(foodItem => (\n        <div className=\"AddFoodItemList__food-item\" key={foodItem.id}>\n          <div className=\"AddFoodItemList__heading\">\n            <h4>{foodItem.name}</h4>\n            <button type=\"button\" onClick={() => onAdd(foodItem)}>Add Portion</button>\n          </div>\n          <ul>\n            <li>{foodItem.calories} calories per 100 grams</li>\n            <li>{foodItem.portion} grams per portion</li>\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useContext, useState, useCallback } from 'react';\nimport { FoodItemContext } from '../contexts/FoodItemContext';\nimport { FoodItem } from '../interfaces/FoodItem';\nimport { FoodPortion, Meal } from '../interfaces/Meal';\nimport { FoodPortionInput, FoodPortionInputProps, FoodPortionInputValue } from './FoodPortionInput';\nimport { calculateTotalCalories } from '../helpers/calculateCalories';\nimport { AddFoodItemList } from './AddFoodItemList';\nimport './CreateMealForm.css';\nimport { adjustFoodPortionValue } from '../helpers/adjustFoodPortionValue';\ninterface Props {\n  onValidSubmit: (meal: Meal) => void;\n}\n\ninterface State {\n  foodPortions: FoodPortionInputValue[];\n  submitted: boolean;\n}\n\ntype OnChangeFn = FoodPortionInputProps['onChange'];\ntype OnRemoveFn = FoodPortionInputProps['onRemove'];\n\nconst initialState: Readonly<State> = {\n  foodPortions: [],\n  submitted: false\n}\n\nconst addFoodPortion = (foodItem: FoodItem) => (state: State): State => {\n  const { foodPortions } = state;\n  const foundIndex = foodPortions.findIndex(foodPortion => foodPortion.id === foodItem.id)\n  const foundFoodPortion = foodPortions[foundIndex]\n  // If food item already has been added, increment portion by 1\n  return foundIndex === -1\n    ? ({\n      ...state,\n      foodPortions: foodPortions.concat({ id: foodItem.id, portions: 1 }),\n    })\n    : updateFoodPortion(foundIndex, { ...foundFoodPortion, portions: Number(foundFoodPortion.portions) + 1 })(state);\n}\n  \n\nconst updateFoodPortion = (index: number, value: Partial<FoodPortionInputValue>) => (state: State): State => ({\n  ...state,\n  foodPortions: [\n    ...state.foodPortions.slice(0, index),\n    { ...state.foodPortions[index], ...value, portions: adjustFoodPortionValue(value.portions) },\n    ...state.foodPortions.slice(index + 1),\n  ],\n});\n\nconst removeFoodItem = (index: number) => (state: State): State => ({\n  ...state,\n  foodPortions: [...state.foodPortions.slice(0, index), ...state.foodPortions.slice(index + 1)]\n});\n\nconst foodPortionIsValid = (foodPortion: FoodPortionInputValue): boolean =>\n  Boolean(foodPortion.id && foodPortion.portions > 0);\n\nconst inputValuesToFoodPortions = (inputValues: FoodPortionInputValue[]): FoodPortion[] =>\n  inputValues.map(inputValue => ({\n    ...inputValue,\n    portions: Number(inputValue.portions)\n  }));\n\nexport const CreateMealForm: React.FC<Props> = ({ onValidSubmit }) => {\n  const [{ foodPortions, submitted }, setState] = useState(initialState);\n  const { getFoodItem } = useContext(FoodItemContext);\n\n  const handleChange: OnChangeFn = useCallback(\n    (index, value) => {\n      setState(updateFoodPortion(index, value))\n    },\n    [setState],\n  );\n  \n  const handleReset = useCallback(\n    () => {\n      setState(initialState);\n    },\n    [setState],\n  );\n  \n  const handleAddFoodItem = useCallback(\n    (foodItem: FoodItem) => {\n      setState(addFoodPortion(foodItem)); \n    },\n    [setState],\n  );\n  \n  const handleRemove: OnRemoveFn = useCallback(\n    (index) => {\n      setState(removeFoodItem(index))\n    },\n    [setState],\n  );\n\n  const handleSubmit = useCallback(\n    (event: React.FormEvent<HTMLFormElement>) => {\n      if (foodPortions.length && foodPortions.every(foodPortionIsValid)) {\n        onValidSubmit({ foodPortions: foodPortions as FoodPortion[] });\n        setState(initialState);\n      } else {\n        setState(prevState => ({ ...prevState, submitted: true }));\n      }\n      event.preventDefault();\n    },\n    [foodPortions, onValidSubmit, setState]\n  );\n\n  const totalCalories = calculateTotalCalories(inputValuesToFoodPortions(foodPortions), getFoodItem);\n  \n  return (\n    <div className=\"CreateMealForm\">\n      <AddFoodItemList onAdd={handleAddFoodItem} />\n      <form className=\"CreateMealForm__form\" onSubmit={handleSubmit}>\n        {foodPortions.map((foodPortion, index) => {\n          const foodItem = getFoodItem(foodPortion.id);\n          return foodItem && (\n            <FoodPortionInput\n              index={index}\n              submitted={submitted}\n              value={foodPortion}\n              foodItem={foodItem}\n              onChange={handleChange}\n              onRemove={handleRemove}\n              key={index}\n            />\n          );\n        })}\n        <h4>Total calories: {totalCalories}</h4>\n        {!foodPortions.length && <div className=\"CreateMealForm__no-food-items\">Add a food item get started</div>}\n        <button disabled={!foodPortions.length} type=\"button\" onClick={handleReset}>Reset</button>\n        <button disabled={!foodPortions.length}>Create Meal</button>\n      </form>\n    </div>\n  );\n}","import React, { useContext, useState, useCallback } from 'react';\nimport { MealContext } from '../contexts/MealContext';\nimport { Meal } from '../interfaces/Meal';\nimport { CreateMealForm } from './CreateMealForm';\n\nconst initialState = {\n  showForm: false\n}\ntype State = Readonly<typeof initialState>;\n\nexport const CreateMealView: React.FC = () => {\n  const { addMeal } = useContext(MealContext);\n  const [{ showForm }, setState] = useState<State>(initialState);\n\n  const handleClick = useCallback(\n    () => {\n      setState({ showForm: true });\n    },\n    [setState]\n  );\n\n  const handleValidSubmit = useCallback(\n    (meal: Meal) => {\n      addMeal(meal);\n      setState(initialState);\n    },\n    [addMeal, setState]\n  );\n\n  return (\n    <div>\n      <h2>Create a Meal</h2>\n      {showForm ? <CreateMealForm onValidSubmit={handleValidSubmit} /> : <button onClick={handleClick}>Click to begin!</button>}\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport { MealList } from './components/MealList';\nimport { MealProvider } from './contexts/MealContext';\nimport { CreateMealView } from './components/CreateMealView';\nimport { FoodItemProvider } from './contexts/FoodItemContext';\n\nconst App: React.FC = () => {\n  return (\n    <FoodItemProvider>\n      <MealProvider>\n        <div className=\"App\">\n          <div>\n            <h1>Mealify</h1>\n            <h4>Your trusty meal logger!</h4>\n          </div>\n          <div className=\"App__divider\" />\n          <div className=\"App__content\">\n            <MealList />\n            <CreateMealView />\n          </div>\n        </div>\n      </MealProvider>\n    </FoodItemProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}